@model Webapp.ViewModels.HomeViewModel


@section title {
    <title>@ViewData["Title"]</title>
}
<h2>Comprar Productos</h2>

<!-- Botón de Agregar Producto -->
<a href="#" class="btn btn-info mb-3" onclick="showAddProductForm()">Agregar Producto</a>

<!-- Tabla de productos -->
<h3>Productos Disponibles</h3>
<table class="table">
    <thead>
        <tr>
            <th>Nombre</th>
            <th>Precio</th>
            <th>Stock</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in Model.Products)
        {
            <tr>
                <td>@product.Name</td>
                <td>@product.Price</td>
                <td>@product.Stock</td>
                <td>
                    <button class="btn btn-success" onclick="buyProduct(@product.ProductId)">Comprar</button>
                    <button class="btn btn-warning" onclick="editProduct(@product.ProductId, '@product.Name', @product.Price, @product.Stock)">Editar</button>
                    <button class="btn btn-danger" onclick="deleteProduct(@product.ProductId)">Eliminar</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Formulario de Agregar Producto -->
<div id="addProductForm" style="display:none;">
    <h3>Agregar Producto</h3>
    <input type="text" id="productName" placeholder="Nombre" class="form-control mb-2">
    <input type="number" id="productPrice" placeholder="Precio" class="form-control mb-2">
    <input type="number" id="productStock" placeholder="Stock" class="form-control mb-2">
    <button class="btn btn-primary" onclick="addProduct()">Guardar Producto</button>
    <button class="btn btn-secondary" onclick="hideAddProductForm()">Cancelar</button>
</div>

<!-- Formulario de Editar Producto -->
<div id="editProductForm" style="display:none;">
    <h3>Editar Producto</h3>
    <input type="hidden" id="editProductId">
    <input type="text" id="editProductName" class="form-control mb-2">
    <input type="number" id="editProductPrice" class="form-control mb-2">
    <input type="number" id="editProductStock" class="form-control mb-2">
    <button class="btn btn-success" onclick="updateProduct()">Actualizar</button>
    <button class="btn btn-secondary" onclick="hideEditProductForm()">Cancelar</button>
</div>

<script>
    // Mostrar y ocultar formularios
    function showAddProductForm() {
        document.getElementById("addProductForm").style.display = "block";
    }
    function hideAddProductForm() {
        document.getElementById("addProductForm").style.display = "none";
    }
    function showEditProductForm() {
        document.getElementById("editProductForm").style.display = "block";
    }
    function hideEditProductForm() {
        document.getElementById("editProductForm").style.display = "none";
    }

    // Agregar Producto
    function addProduct() {
        let name = document.getElementById("productName").value;
        let price = document.getElementById("productPrice").value;
        let stock = document.getElementById("productStock").value;

        fetch('/Home/AddProduct', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ Name: name, Price: price, Stock: stock })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('Producto agregado con éxito.');
                location.reload();
            } else {
                alert('Error al agregar producto.');
            }
        });
    }

    // Editar Producto
    function editProduct(id, name, price, stock) {
        document.getElementById("editProductId").value = id;
        document.getElementById("editProductName").value = name;
        document.getElementById("editProductPrice").value = price;
        document.getElementById("editProductStock").value = stock;
        showEditProductForm();
    }

    function updateProduct() {
        let id = document.getElementById("editProductId").value;
        let name = document.getElementById("editProductName").value;
        let price = document.getElementById("editProductPrice").value;
        let stock = document.getElementById("editProductStock").value;

        fetch('/Home/EditProduct', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ ProductId: id, Name: name, Price: price, Stock: stock })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('Producto actualizado con éxito.');
                location.reload();
            } else {
                alert('Error al actualizar producto.');
            }
        });
    }
        function buyProduct(productId) {
        fetch('/Home/BuyProduct', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ productId: productId })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert(`Producto comprado con éxito. Nuevo stock: ${data.newStock}`);
                location.reload(); // Recargar la página para actualizar el stock
            } else {
                alert(`Error: ${data.message}`);
            }
        })
        .catch(error => console.error('Error:', error));
    }
    // Eliminar Producto
    function deleteProduct(productId) {
        if (!confirm("¿Seguro que deseas eliminar este producto?")) return;

        fetch('/Home/DeleteProduct', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ ProductId: productId })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('Producto eliminado.');
                location.reload();
            } else {
                alert('Error al eliminar producto.');
            }
        });
    }
</script>
